#pragma once

#include <memory>
#include <string>

class Timer {
public:
  explicit Timer(std::string &&, std::string &&);
  ~Timer();

private:
  std::unique_ptr<class TimerImpl> impl_;
};

#define TIMER(name, sig)                                                       \
  Timer t { std::move(name), std::move(sig) }

template <class Callable, class... Args>
auto timeit(std::string name, std::string sig, Callable &&call,
            Args &&...args) {
  TIMER(std::move(name), std::move(sig));
  return call(std::forward<Args>(args)...);
}

#define TIMEIT(fn, ...) timeit(#fn, #__VA_ARGS__, fn, __VA_ARGS__)

class Times {
public:
  explicit Times();
  void Add(std::string &&name, std::string &&sig, std::size_t count);
  void Show();

private:
  std::unique_ptr<class TimesImpl> impl_;
} extern times;

namespace dsol_1 {
/**
 * Multiples of 3 or 5
 *
 * If we list all the natural numbers below 10 athat are multiples of 3 or 5,
 * we get 3, 5, 6 and 9. The sum of these multiples is 23.
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */

long long sum_3_5_le(long long N);
long long sum_3_5_le_pro(long long N);

} // namespace dsol_1

namespace dsol_2 {
/**
 * Even Fibonacci Numbers
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 *                  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 */

long long sumevenfib(long long N);
long long sumevenfib_step(long long N);

} // namespace dsol_2
